{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "fileMatch": [
    "context.json",
    "context.yaml"
  ],
  "id": "https://ctxgithub.com/",
  "title": "ContextHub Configuration",
  "description": "Configuration schema for ContextHub document generator",
  "type": "object",
  "oneOf": [
    {
      "required": [
        "documents"
      ]
    },
    {
      "required": [
        "prompts"
      ]
    }
  ],
  "properties": {
    "prompts": {
      "type": "array",
      "description": "List of prompts to be registered",
      "items": {
        "$ref": "#/definitions/prompt"
      }
    },
    "variables": {
      "type": "object",
      "description": "Custom variables to use throughout the configuration",
      "additionalProperties": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "number"
          },
          {
            "type": "boolean"
          }
        ]
      },
      "examples": [
        {
          "version": "1.0.0",
          "project_name": "My Project",
          "environment": "development",
          "api_token": "xyz-123-abc"
        }
      ]
    },
    "import": {
      "type": "array",
      "description": "List of external configuration files to import",
      "items": {
        "oneOf": [
          {
            "type": "string",
            "description": "Path to configuration file (relative to this file) - shorthand format"
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "file",
                  "url"
                ],
                "description": "Type of import source"
              },
              "description": {
                "type": "string",
                "description": "Human-readable description of the import"
              },
              "pathPrefix": {
                "type": "string",
                "description": "Path prefix to apply to all source paths in the imported configuration"
              }
            },
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "file"
                    }
                  }
                },
                "then": {
                  "required": [
                    "path"
                  ],
                  "properties": {
                    "path": {
                      "type": "string",
                      "description": "Path to configuration file (relative to this file)"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "url"
                    }
                  }
                },
                "then": {
                  "required": [
                    "url"
                  ],
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "URL to fetch configuration from"
                    }
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "path"
            ],
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to configuration file (relative to this file)"
              },
              "pathPrefix": {
                "type": "string",
                "description": "Path prefix to apply to all source paths in the imported configuration"
              },
              "description": {
                "type": "string",
                "description": "Human-readable description of the import"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "settings": {
      "type": "object",
      "description": "Global settings for the context generator",
      "properties": {
        "modifiers": {
          "type": "object",
          "description": "Named modifier configurations that can be referenced by alias"
        }
      }
    },
    "documents": {
      "type": "array",
      "description": "List of documents to generate",
      "items": {
        "$ref": "#/definitions/document"
      },
      "minItems": 1
    }
  },
  "definitions": {
    "prompt": {
      "type": "object",
      "required": [
        "id",
        "messages"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the prompt"
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of the prompt"
        },
        "schema": {
          "type": "object",
          "description": "Defines input parameters for this prompt",
          "properties": {
            "properties": {
              "type": "object",
              "description": "Property definitions for input parameters",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "Description of this parameter"
                  }
                }
              }
            },
            "required": {
              "type": "array",
              "description": "List of required parameters",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "messages": {
          "type": "array",
          "description": "List of messages that define the prompt",
          "items": {
            "type": "object",
            "required": [
              "role",
              "content"
            ],
            "properties": {
              "role": {
                "type": "string",
                "enum": [
                  "user",
                  "assistant"
                ],
                "description": "The role of the message sender"
              },
              "content": {
                "type": "string",
                "description": "The content of the message, may contain variable placeholders like ${variableName}"
              }
            }
          },
          "minItems": 1
        }
      }
    },
    "document": {
      "type": "object",
      "required": [
        "description",
        "outputPath",
        "sources"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "Human-readable description of the document"
        },
        "outputPath": {
          "type": "string",
          "description": "Path where the document will be saved",
          "pattern": "^[\\w\\-./]+\\.[\\w]+$"
        },
        "overwrite": {
          "type": "boolean",
          "description": "Whether to overwrite existing files",
          "default": true
        },
        "sources": {
          "type": "array",
          "description": "List of content sources for this document",
          "items": {
            "$ref": "#/definitions/source"
          }
        },
        "modifiers": {
          "$ref": "#/definitions/modifiers"
        },
        "tags": {
          "type": "array",
          "description": "List of tags for a document",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "source": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "file",
            "url",
            "text",
            "github",
            "git_diff",
            "tree",
            "composer"
          ],
          "description": "Type of content source"
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of the source"
        },
        "modifiers": {
          "$ref": "#/definitions/modifiers"
        },
        "tags": {
          "type": "array",
          "description": "List of tags for this source",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "file"
              }
            }
          },
          "then": {
            "$ref": "#/definitions/fileSource"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "url"
              }
            }
          },
          "then": {
            "$ref": "#/definitions/urlSource"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "text"
              }
            }
          },
          "then": {
            "$ref": "#/definitions/textSource"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "github"
              }
            }
          },
          "then": {
            "$ref": "#/definitions/githubSource"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "git_diff"
              }
            }
          },
          "then": {
            "$ref": "#/definitions/gitDiffSource"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "composer"
              }
            }
          },
          "then": {
            "$ref": "#/definitions/composerSource"
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "tree"
              }
            }
          },
          "then": {
            "$ref": "#/definitions/treeSource"
          }
        }
      ]
    },
    "filePattern": {
      "oneOf": [
        {
          "type": "string",
          "description": "Pattern to match files (e.g., *.php)"
        },
        {
          "type": "array",
          "description": "List of patterns to match files (e.g., ['*.php', '*.md'])",
          "items": {
            "type": "string",
            "enum": [
              "*.php",
              "*.md",
              "*.txt",
              "*.json",
              "*.xml",
              "*.html",
              "*.css",
              "*.js"
            ]
          }
        }
      ]
    },
    "sourcePaths": {
      "oneOf": [
        {
          "type": "string",
          "description": "Path to file or directory"
        },
        {
          "type": "array",
          "description": "List of paths to files or directories",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "patternConstraint": {
      "oneOf": [
        {
          "type": "string",
          "description": "Pattern constraint"
        },
        {
          "type": "array",
          "description": "List of pattern constraints",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "treeViewConfig": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether to show the tree view",
          "default": true
        },
        "showSize": {
          "type": "boolean",
          "description": "Include file/directory sizes in the tree",
          "default": false
        },
        "showLastModified": {
          "type": "boolean",
          "description": "Include last modified dates in the tree",
          "default": false
        },
        "showCharCount": {
          "type": "boolean",
          "description": "Include character counts in the tree",
          "default": false
        },
        "includeFiles": {
          "type": "boolean",
          "description": "Whether to include files in the tree or only directories",
          "default": true
        },
        "maxDepth": {
          "type": "integer",
          "description": "Maximum depth of the tree to display (0 for unlimited)",
          "minimum": 0,
          "default": 0
        },
        "dirContext": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional context/descriptions for specific directories"
        }
      }
    },
    "fileSource": {
      "required": [
        "sourcePaths"
      ],
      "properties": {
        "sourcePaths": {
          "$ref": "#/definitions/sourcePaths"
        },
        "filePattern": {
          "$ref": "#/definitions/filePattern",
          "default": "*.*"
        },
        "excludePatterns": {
          "type": "array",
          "description": "Patterns to exclude files (alias for notPath)",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "notPath": {
          "type": "array",
          "description": "Patterns to exclude files by path",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "path": {
          "$ref": "#/definitions/patternConstraint"
        },
        "contains": {
          "$ref": "#/definitions/patternConstraint"
        },
        "notContains": {
          "$ref": "#/definitions/patternConstraint"
        },
        "size": {
          "$ref": "#/definitions/patternConstraint"
        },
        "date": {
          "$ref": "#/definitions/patternConstraint"
        },
        "ignoreUnreadableDirs": {
          "type": "boolean",
          "description": "Whether to ignore unreadable directories",
          "default": false
        },
        "showTreeView": {
          "type": "boolean",
          "description": "Whether to show directory tree",
          "default": true
        },
        "treeView": {
          "oneOf": [
            {
              "type": "boolean",
              "description": "Whether to show the tree view"
            },
            {
              "$ref": "#/definitions/treeViewConfig"
            }
          ],
          "description": "Tree view configuration"
        },
        "modifiers": {
          "$ref": "#/definitions/modifiers"
        }
      }
    },
    "urlSource": {
      "required": [
        "urls"
      ],
      "properties": {
        "urls": {
          "type": "array",
          "description": "List of URLs to fetch content from",
          "items": {
            "type": "string",
            "format": "uri"
          },
          "minItems": 1
        },
        "selector": {
          "type": "string",
          "description": "CSS selector to extract specific content (null for full page)"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Custom HTTP headers to send with requests"
        }
      }
    },
    "textSource": {
      "required": [
        "content"
      ],
      "properties": {
        "content": {
          "type": "string",
          "description": "Text content"
        },
        "tag": {
          "type": "string",
          "description": "Tag to help LLM understand the content. By default, it is set to 'instruction'.",
          "default": "instruction"
        }
      }
    },
    "githubSource": {
      "required": [
        "repository",
        "sourcePaths"
      ],
      "properties": {
        "repository": {
          "type": "string",
          "description": "GitHub repository in format owner/repo",
          "pattern": "^[\\w.-]+/[\\w.-]+$"
        },
        "sourcePaths": {
          "$ref": "#/definitions/sourcePaths"
        },
        "branch": {
          "type": "string",
          "description": "Branch or tag to fetch from",
          "default": "main"
        },
        "filePattern": {
          "$ref": "#/definitions/filePattern",
          "default": "*.php"
        },
        "excludePatterns": {
          "type": "array",
          "description": "Patterns to exclude files",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "showTreeView": {
          "type": "boolean",
          "description": "Whether to show directory tree",
          "default": true
        },
        "githubToken": {
          "type": "string",
          "description": "GitHub API token for private repositories (can use env var pattern ${TOKEN_NAME})"
        }
      }
    },
    "gitDiffSource": {
      "properties": {
        "repository": {
          "type": "string",
          "description": "Path to the git repository"
        },
        "render": {
          "$ref": "#/definitions/gitDiffRender",
          "description": "Configuration for rendering diffs"
        },
        "commit": {
          "type": "string",
          "enum": [
            "last",
            "last-5",
            "last-10",
            "last-week",
            "last-month",
            "unstaged",
            "staged",
            "wip",
            "main-diff",
            "master-diff",
            "develop-diff",
            "today",
            "last-24h",
            "yesterday",
            "last-2weeks",
            "last-quarter",
            "last-year",
            "stash",
            "stash-last",
            "stash-1",
            "stash-2",
            "stash-3",
            "stash-all",
            "stash-latest-2",
            "stash-latest-3",
            "stash-latest-5",
            "stash-before-pull",
            "stash-wip",
            "stash-untracked",
            "stash-index"
          ],
          "description": "Git commit range (e.g., 'HEAD~5..HEAD')",
          "default": "staged"
        },
        "filePattern": {
          "oneOf": [
            {
              "type": "string",
              "description": "Pattern to match files (e.g., *.php)"
            },
            {
              "type": "array",
              "description": "List of patterns to match files (e.g., ['*.php', '*.md'])",
              "items": {
                "type": "string"
              }
            }
          ],
          "default": "*.*"
        },
        "path": {
          "oneOf": [
            {
              "type": "string",
              "description": "Pattern to include only files in specific paths"
            },
            {
              "type": "array",
              "description": "List of patterns to include only files in specific paths",
              "items": {
                "type": "string"
              }
            }
          ],
          "default": []
        },
        "notPath": {
          "type": "array",
          "description": "Patterns to exclude files by path",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "contains": {
          "oneOf": [
            {
              "type": "string",
              "description": "Pattern to include only diffs containing specific content"
            },
            {
              "type": "array",
              "description": "List of patterns to include only diffs containing specific content",
              "items": {
                "type": "string"
              }
            }
          ],
          "default": []
        },
        "notContains": {
          "oneOf": [
            {
              "type": "string",
              "description": "Pattern to exclude diffs containing specific content"
            },
            {
              "type": "array",
              "description": "List of patterns to exclude diffs containing specific content",
              "items": {
                "type": "string"
              }
            }
          ],
          "default": []
        },
        "showStats": {
          "type": "boolean",
          "description": "Whether to show commit stats in output",
          "default": true
        },
        "modifiers": {
          "$ref": "#/definitions/modifiers"
        }
      }
    },
    "gitDiffRender": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "strategy": {
              "type": "string",
              "enum": [
                "raw",
                "llm"
              ],
              "description": "The strategy to use for rendering diffs",
              "default": "raw"
            },
            "showStats": {
              "type": "boolean",
              "description": "Whether to show file stats in the output",
              "default": true
            },
            "showLineNumbers": {
              "type": "boolean",
              "description": "Whether to show line numbers in diff output",
              "default": false
            },
            "contextLines": {
              "type": "integer",
              "description": "Number of context lines to show around changes",
              "minimum": 0,
              "default": 3
            }
          }
        },
        {
          "type": "string",
          "enum": [
            "raw",
            "llm"
          ],
          "description": "The strategy to use for rendering diffs (shorthand)"
        }
      ],
      "description": "Configuration for rendering diffs"
    },
    "treeSource": {
      "description": "Generates a hierarchical visualization of directory structures",
      "properties": {
        "type": {
          "type": "string",
          "const": "tree",
          "description": "Source type identifier"
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of the source"
        },
        "sourcePaths": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "description": "Path(s) to generate tree from"
        },
        "filePattern": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "description": "Pattern(s) to match files"
        },
        "notPath": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Patterns to exclude from the tree"
        },
        "path": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "description": "Patterns to include only specific paths"
        },
        "contains": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "description": "Include files containing specific content"
        },
        "notContains": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "description": "Exclude files containing specific content"
        },
        "maxDepth": {
          "type": "integer",
          "minimum": 0,
          "description": "Maximum depth of the tree to display (0 for unlimited)"
        },
        "includeFiles": {
          "type": "boolean",
          "default": true,
          "description": "Whether to include files in the tree or only directories"
        },
        "showSize": {
          "type": "boolean",
          "default": false,
          "description": "Include file/directory sizes in the tree"
        },
        "showCharCount": {
          "type": "boolean",
          "default": false,
          "description": "Include character counts in the tree"
        },
        "showLastModified": {
          "type": "boolean",
          "default": false,
          "description": "Include last modified dates in the tree"
        },
        "dirContext": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional context/descriptions for specific directories"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tags to categorize or filter sources"
        }
      },
      "required": [
        "type",
        "sourcePaths"
      ]
    },
    "composerSource": {
      "properties": {
        "composerPath": {
          "type": "string",
          "description": "Path to composer.json file or directory containing it"
        },
        "packages": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "description": "Package names to include (e.g., 'vendor/package')"
        },
        "filePattern": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "description": "File pattern(s) to match"
        },
        "notPath": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Patterns to exclude files"
        },
        "path": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "description": "Patterns to include only specific paths"
        },
        "contains": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "description": "Patterns to include files containing specific content"
        },
        "notContains": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "description": "Patterns to exclude files containing specific content"
        },
        "includeDevDependencies": {
          "type": "boolean",
          "description": "Whether to include dev dependencies"
        },
        "showTreeView": {
          "type": "boolean",
          "description": "Whether to show directory tree visualization"
        },
        "treeView": {
          "oneOf": [
            {
              "type": "boolean",
              "description": "Whether to show the tree view"
            },
            {
              "$ref": "#/definitions/treeViewConfig"
            }
          ],
          "description": "Tree view configuration"
        },
        "modifiers": {
          "$ref": "#/definitions/modifiers"
        }
      }
    },
    "php-content-filter": {
      "type": "object",
      "properties": {
        "include_methods": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Method names to include (empty means include all unless exclude_methods is set)"
        },
        "exclude_methods": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Method names to exclude"
        },
        "include_properties": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Property names to include"
        },
        "exclude_properties": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Property names to exclude"
        },
        "include_constants": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Constant names to include"
        },
        "exclude_constants": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Constant names to exclude"
        },
        "method_visibility": {
          "$ref": "#/definitions/visibilityOptions",
          "description": "Method visibilities to include"
        },
        "property_visibility": {
          "$ref": "#/definitions/visibilityOptions",
          "description": "Property visibilities to include"
        },
        "constant_visibility": {
          "$ref": "#/definitions/visibilityOptions",
          "description": "Constant visibilities to include"
        },
        "keep_method_bodies": {
          "type": "boolean",
          "description": "Whether to keep method bodies or replace with placeholders"
        },
        "method_body_placeholder": {
          "type": "string",
          "description": "Placeholder for method bodies when keep_method_bodies is false"
        },
        "keep_doc_comments": {
          "type": "boolean",
          "description": "Whether to keep doc comments"
        },
        "keep_attributes": {
          "type": "boolean",
          "description": "Whether to keep PHP 8+ attributes"
        },
        "include_methods_pattern": {
          "type": "string",
          "description": "Regex pattern for methods to include"
        },
        "exclude_methods_pattern": {
          "type": "string",
          "description": "Regex pattern for methods to exclude"
        },
        "include_properties_pattern": {
          "type": "string",
          "description": "Regex pattern for properties to include"
        },
        "exclude_properties_pattern": {
          "type": "string",
          "description": "Regex pattern for properties to exclude"
        }
      }
    },
    "php-docs": {
      "type": "object",
      "properties": {
        "include_private_methods": {
          "type": "boolean",
          "description": "Whether to include private methods in documentation",
          "default": false
        },
        "include_protected_methods": {
          "type": "boolean",
          "description": "Whether to include protected methods in documentation",
          "default": true
        },
        "include_private_properties": {
          "type": "boolean",
          "description": "Whether to include private properties in documentation",
          "default": false
        },
        "include_protected_properties": {
          "type": "boolean",
          "description": "Whether to include protected properties in documentation",
          "default": true
        },
        "include_implementations": {
          "type": "boolean",
          "description": "Whether to include method implementations in code blocks",
          "default": true
        },
        "include_property_defaults": {
          "type": "boolean",
          "description": "Whether to include property default values",
          "default": true
        },
        "include_constants": {
          "type": "boolean",
          "description": "Whether to include class constants",
          "default": true
        },
        "code_block_format": {
          "type": "string",
          "description": "Language identifier for code blocks (e.g., 'php')",
          "default": "php"
        },
        "class_heading_level": {
          "type": "integer",
          "description": "Heading level for class names (1-6)",
          "minimum": 1,
          "maximum": 6,
          "default": 1
        },
        "extract_routes": {
          "type": "boolean",
          "description": "Whether to extract route information from annotations/attributes",
          "default": true
        },
        "keep_doc_comments": {
          "type": "boolean",
          "description": "Whether to keep doc comments in the output",
          "default": true
        }
      }
    },
    "sanitizer": {
      "type": "object",
      "properties": {
        "rules": {
          "type": "array",
          "description": "Array of sanitization rules to apply",
          "items": {
            "type": "object",
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "keyword"
                    ],
                    "description": "Keyword removal rule"
                  },
                  "name": {
                    "type": "string",
                    "description": "Optional unique rule name"
                  },
                  "keywords": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of keywords to search for and remove"
                  },
                  "replacement": {
                    "type": "string",
                    "description": "Text to replace the found keywords with"
                  },
                  "caseSensitive": {
                    "type": "boolean",
                    "description": "Whether matching should be case-sensitive"
                  },
                  "removeLines": {
                    "type": "boolean",
                    "description": "Whether to remove entire lines containing the keyword"
                  }
                },
                "required": [
                  "type",
                  "keywords"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "regex"
                    ],
                    "description": "Regular expression replacement rule"
                  },
                  "name": {
                    "type": "string",
                    "description": "Optional unique rule name"
                  },
                  "patterns": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Object mapping regex patterns to their replacements"
                  },
                  "usePatterns": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "credit-card",
                        "email",
                        "api-key",
                        "ip-address",
                        "jwt",
                        "phone-number",
                        "password-field",
                        "url",
                        "social-security",
                        "aws-key",
                        "private-key",
                        "database-conn"
                      ]
                    },
                    "description": "Predefined pattern aliases to use"
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "comment"
                    ],
                    "description": "Comment insertion rule"
                  },
                  "name": {
                    "type": "string",
                    "description": "Optional unique rule name"
                  },
                  "fileHeaderComment": {
                    "type": "string",
                    "description": "Comment to insert at the top of file"
                  },
                  "classComment": {
                    "type": "string",
                    "description": "Comment to insert before class definitions"
                  },
                  "methodComment": {
                    "type": "string",
                    "description": "Comment to insert before method definitions"
                  },
                  "frequency": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "How often to insert random comments (0 = disabled, 1 = every line, 5 = every 5th line)"
                  },
                  "randomComments": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of random comments to insert"
                  }
                },
                "required": [
                  "type"
                ]
              }
            ],
            "required": [
              "type"
            ]
          }
        }
      }
    },
    "modifiers": {
      "type": "array",
      "description": "List of content modifiers to apply",
      "items": {
        "oneOf": [
          {
            "type": "string",
            "description": "Modifier identifier or alias"
          },
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Modifier identifier",
                "enum": [
                  "php-content-filter",
                  "php-docs",
                  "sanitizer"
                ]
              },
              "options": {
                "description": "Modifier options",
                "allOf": [
                  {
                    "if": {
                      "properties": {
                        "name": {
                          "const": "php-content-filter"
                        }
                      }
                    },
                    "then": {
                      "$ref": "#/definitions/php-content-filter"
                    }
                  },
                  {
                    "if": {
                      "properties": {
                        "name": {
                          "const": "php-docs"
                        }
                      }
                    },
                    "then": {
                      "$ref": "#/definitions/php-docs"
                    }
                  },
                  {
                    "if": {
                      "properties": {
                        "name": {
                          "const": "sanitizer"
                        }
                      }
                    },
                    "then": {
                      "$ref": "#/definitions/sanitizer"
                    }
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "visibilityOptions": {
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "public",
          "protected",
          "private"
        ]
      }
    }
  }
}