---

name: ðŸ“¦ Build binary

on: # yamllint disable-line rule:truthy
  release:
    types:
      - published
  pull_request:
    branches:
      - main

jobs:
  build-unix:
    runs-on: ubuntu-latest
    name: ðŸ“¦ Build Unix Executables
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: linux
            arch: x86_64
            docker_arch: amd64
          - os: linux
            arch: aarch64
            docker_arch: arm64
          - os: macos
            arch: x86_64
            docker_arch: amd64
          - os: macos
            arch: aarch64
            docker_arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64,amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract version from tag
        id: get_version
        run: |
          if [[ "$GITHUB_REF_NAME" == refs/pull/* ]]; then
            # For pull requests, use "dev" as version
            VERSION="dev"
          else
            # For releases, extract version from tag (remove 'v' prefix if present)
            VERSION=${GITHUB_REF_NAME#v}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "{\"version\": \"$VERSION\", \"type\":\"bin\"}" > version.json

      - name: Build Docker image for ${{ matrix.platform.os }}-${{ matrix.platform.arch }}
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: ctx-builder-${{ matrix.platform.os }}-${{ matrix.platform.arch }}:latest
          platforms: linux/${{ matrix.platform.docker_arch }}
          build-args: |
            TARGET_OS=${{ matrix.platform.os }}
            TARGET_ARCH=${{ matrix.platform.arch }}
            VERSION=${{ env.VERSION }}
          cache-from: type=gha,scope=${{ matrix.platform.os }}-${{ matrix.platform.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform.os }}-${{ matrix.platform.arch }}

      - name: Extract executable
        run: |
          mkdir -p dist
          container_id=$(docker create ctx-builder-${{ matrix.platform.os }}-${{ matrix.platform.arch }}:latest)
          docker cp $container_id:/.output/ctx-${{ matrix.platform.os }}-${{ matrix.platform.arch }}-${{ env.VERSION }} ./dist/
          docker rm $container_id
          chmod +x ./dist/ctx-${{ matrix.platform.os }}-${{ matrix.platform.arch }}-${{ env.VERSION }}

      - name: ðŸ“¤ Upload release assets
        uses: softprops/action-gh-release@v2.2.1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          token: "${{ secrets.RELEASE_TOKEN }}"
          files: |
            ./dist/ctx-${{ matrix.platform.os }}-${{ matrix.platform.arch }}-${{ env.VERSION }}

  build-windows:
    runs-on: windows-latest
    name: ðŸ“¦ Build Windows Executable

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract version from tag
        id: get_version
        shell: bash
        run: |
          if [[ "$GITHUB_REF_NAME" == refs/pull/* ]]; then
            # For pull requests, use "dev" as version
            VERSION="dev"
          else
            # For releases, extract version from tag (remove 'v' prefix if present)
            VERSION=${GITHUB_REF_NAME#v}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "{\"version\": \"$VERSION\", \"type\":\"bin\"}" > version.json

      - name: Build Docker image for Windows
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.windows
          push: false
          load: true
          tags: ctx-builder-windows:latest
          build-args: |
            VERSION=${{ env.VERSION }}

      - name: Extract Windows executable
        shell: powershell
        run: |
          mkdir -Force dist
          $containerId = docker create ctx-builder-windows:latest
          docker cp "$($containerId):C:/output/ctx-windows-x64-${{ env.VERSION }}.exe" ./dist/
          docker rm $containerId

      - name: ðŸ“¤ Upload release assets
        uses: softprops/action-gh-release@v2.2.1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          token: "${{ secrets.RELEASE_TOKEN }}"
          files: |
            dist/ctx-windows-x64-${{ env.VERSION }}.exe
